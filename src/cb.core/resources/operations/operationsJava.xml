<?xml version="1.0" encoding="UTF-8"?>
<operations>
    <category name="Basic" expanded="true">
        <operation text="End"
            toolTip="Method end point. Additing any operation after `End` will cause an error"
            image="images/operations/icons/begin_end.gif">
            <node type="return">
                <keywords>
                    <return_value default=""
                        wizzard_toolTip="Function's return value" />
                </keywords>
                <template code="return ${return_value};" />
            </node>
        </operation>
        <operation text="Initialization"
            toolTip="Initialize value with another value."
            image="images/operations/icons/function.gif">
            <node type="function">
                <keywords>
                    <destination default="destination"
                        wizzard_toolTip="Value wich will be initialized" />
                    <initialization
                        default="initialization"
                        wizzard_toolTip="Value wich will initialize value1" />
                </keywords>
                <template
                    code="${destination} = ${initialization};" />
            </node>
        </operation>
    </category>
    <category name="Conditions" expanded="true">
        <operation text="If" toolTip="Input values section"
            image="images/operations/icons/condition.gif">
            <node type="condition"></node>
        </operation>
    </category>
    <category name="Input/Output" expanded="true">

        <operation text="Console input"
            toolTip="Input value from console"
            image="images/operations/icons/input_output.gif">
            <node type="function">
                <keywords>
                    <value default="string"
                        wizzard_toolTip="Input value" />
                </keywords>
                <template
                    code="   
    BufferedReader br = null;
    try {
      br = new BufferedReader(new InputStreamReader(System.in));
      ${value} = br.readLine();
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      if (br != null) {
        try {
          br.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }" />
            </node>
        </operation>
        <operation text="Console output"
            toolTip="Ouptut value on console"
            image="images/operations/icons/function.gif">
            <node type="function">
                <keywords>
                    <value default="string"
                        wizzard_toolTip="Output value" />
                </keywords>
                <template code="System.out.println(${value});" />
            </node>
        </operation>
    </category>
    <category name="Min/Max" expanded="true">
        <operation text="minString"
            toolTip="Find minimal string"
            image="images/operations/icons/function.gif">
            <node type="function">
                <keywords>
                    <collection default="collection"
                        wizzard_toolTip="Source String-type collection" />
                    <destination default="destination"
                        wizzard_toolTip="Value where min String will be stored" />
                </keywords>
                <template
                    code="
    if(!${collection}.isEmpty()) {
      ${destination} = ${collection}.get(0);
      for(String string: ${collection}) {
        if(string.length() &lt; ${destination}.length()) {
          ${destination} = string;
        }
      }
    } else {
      ${destination} = null;
    }" />
            </node>
        </operation>
        <operation text="maxString"
            toolTip="Find maximal string"
            image="images/operations/icons/function.gif">
            <node type="function">
                <keywords>
                    <collection default="collection"
                        wizzard_toolTip="Source number-type collection" />
                    <destination default="destination"
                        wizzard_toolTip="Value where min String will be stored" />
                </keywords>
                <template
                    code="
    if(!${collection}.isEmpty()) {
      ${destination} = ${collection}.get(0);
      for(String string: ${collection}) {
        if(string.length() &gt; ${destination}.length()) {
          ${destination} = string;
        }
      }
    } else {
      ${destination} = null;
    }" />
            </node>
        </operation>
    </category>
    <category name="Sorting" expanded="true">
        <operation text="BubbleSort"
            toolTip="Use bubble sort algorithm"
            image="images/operations/icons/function.gif">
            <node type="function">
                <keywords>
                    <array default="array"
                        wizzard_toolTip="Source number-type collection" />
                </keywords>
                <template
                    code="
    int n = ${array}.length;
    int temp = 0;
    for (int i = 0; i &lt; n; i++) {
      for (int j = 1; j &lt; (n - i); j++) {
        if (arr[j - 1] &gt; arr[j]) {
          temp = ${array}[j - 1];
          ${array}[j - 1] = ${array}[j];
          ${array}[j] = temp;
       }
     }
   }" />
            </node>
        </operation>
        <operation text="QuickSort"
            toolTip="Use quick sort algorithm"
            image="images/operations/icons/function.gif">
            <node type="function">
                <keywords>
                    <array default="array"
                        wizzard_toolTip="Source number-type collection" />
                </keywords>
                <template
                    code="
    int subArray = 0;
    Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();
    stack.push(0);
    stack.push(${array}.length - 1);
    do {
        int right = stack.pop();
        int left = stack.pop();
        --subArray;
        do {
            int _left = left;
            int _right = right;
            int pivot = ${array}[(left + right) / 2];
            do {
                while (pivot &lt; ${array}[_right]) {
                    _right--;
                }
                while (pivot &gt; ${array}[_left]) {
                    _left++;
                }
                if (_left &lt;= _right) {
                    if (_left != _right) {
                        int temp = ${array}[_left];
                        ${array}[_left] = ${array}[_right];
                        ${array}[_right] = temp;
                    }
                    _right--;
                    _left++;
                }
            } while (_right &gt;= _left);
            if (_left &lt; right) {
                ++subArray;
                stack.push(_left);
                stack.push(right);
            }
            right = _right;
        } while (left &lt; right);
    } while (subArray &gt; -1);" />
            </node>
        </operation>
    </category>

</operations>